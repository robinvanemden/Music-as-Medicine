music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
library(here)
library(tuneR)
library(data.table)
library(signal)
source("qrs_detect.R")
source("peak_detect.R")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
setwd(here::here("scripts"))
# read music wav, that has been pre-cut to delete all before first and past last beeps
# range 0 to 4139.022 seconds
# retrieve the part from 17 to 31 minutes - that is, the first musical intermezzo
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
temp = list.files(pattern="../ecg/*.csv")
temp = list.files(pattern="*.csv")
?list.files
temp = list.files(path = "../ecg/", pattern="*.csv")
setNames(temp, make.names(gsub("*.csv$", "", temp)))
?fread
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files)) assign(files[i], fread("../ecg/p3.csv", sep=";"))
for (i in 1:length(files))
assign(files[i], fread(paste0("../ecg/",temp[i]), sep=";"))
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
assign(paste0("subject_",i), fread(paste0("../ecg/",temp[i]), sep=";"))
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
library(here)
library(tuneR)
library(data.table)
library(signal)
source("qrs_detect.R")
source("peak_detect.R")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
setwd(here::here("scripts"))
########################################################## import files #########################################################
# read and plot music wav, that has been pre-cut to delete all before first and past last beeps
# full range 0 to 4139.022 seconds
# here, retrieve the part from 17 to 31 minutes - that is, the first musical intermezzo
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
# read the bobbi data files in data dir
my.data <- list()
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
my.data[[i]] <- assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# delete empty variable
View(my.data)
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
subject_data[[1]]
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
subject_data[[paste0("subject_",i)]] <- fread(paste0("../ecg/",files[i]), sep=";")
subject_data$subject_1
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
library(here)
library(tuneR)
library(data.table)
library(signal)
# Basic first exploratory Bobbi MaM import script.
# To be refactored when there is more data available.
source("qrs_detect.R")
source("peak_detect.R")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
setwd(here::here("scripts"))
########################################################## import files #########################################################
# read and plot music wav, that has been pre-cut to delete all before first and past last beeps
# full range 0 to 4139.022 seconds
# here, retrieve the part from 17 to 31 minutes - that is, the first musical intermezzo
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
# read the bobbi data files in data dir
subject_list <- list()
# for now, we work with two files separately - but in the future, we will
# of course define a function to do the work of the script,
# which will take a subject_list as one of its arguments.
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
# for now:
assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# for future analyses:
subject_list[[gsub("*.csv$", "", files[i])]] <-
fread(paste0("../ecg/",files[i]), sep=";")
subject_2[is_peak==TRUE][,"seconds"]
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
# for now, we work with two data frames seperately
assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# for future analyses:
subject_list[[gsub("*.csv$", "", files[i])]] <-
fread(paste0("../ecg/",files[i]), sep=";")
library(here)
library(tuneR)
library(data.table)
library(signal)
# Basic first exploratory Bobbi MaM import script.
# To be refactored when more data available.
source("qrs_detect.R")
source("peak_detect.R")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
setwd(here::here("scripts"))
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
# for now, we work with two data frames seperately
assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# for future analyses:
subject_list[[gsub("*.csv$", "", files[i])]] <-
fread(paste0("../ecg/",files[i]), sep=";")
subject_list <- list()
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
# for now, we work with two data frames seperately
assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# for future analyses:
subject_list[[gsub("*.csv$", "", files[i])]] <-
fread(paste0("../ecg/",files[i]), sep=";")
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
subject_2[is_peak==TRUE][,"seconds"]
as.vector(subject_2[is_peak==TRUE][,"seconds"])
unlist(subject_2[is_peak==TRUE][,"seconds"])
a <- unlist(subject_2[is_peak==TRUE][,"seconds"])
?unlist
a <- unlist(subject_2[is_peak==TRUE][,"seconds"],recursive = FALSE, use.names = FALSE)
spikes <- cbind(subject_2[is_peak==TRUE][,"seconds"],subject_2[is_peak==TRUE][,"seconds"])
View(highpass)
spikes <- cbind(subject_2[is_peak==TRUE][,"seconds"],subject_3[is_peak==TRUE][,"seconds"])
View(spikes)
spikes <- as.matrix (cbind(subject_2[is_peak==TRUE][,"seconds"],subject_3[is_peak==TRUE][,"seconds"]))
View(spikes)
View(spikes)
spikes <- t(as.matrix (cbind(subject_2[is_peak==TRUE][,"seconds"],subject_3[is_peak==TRUE][,"seconds"])))
View(spikes)
write.table(mat,file="test2.txt",row.names=FALSE)
?write.table
write.table(spikes,file="test2.txt",row.names=FALSE)
write.table(spikes,file=""../export/spikes.csv"",row.names=FALSE)
write.table(spikes,file="../export/spikes.csv",row.names=FALSE)
write.table(spikes,
file = "../export/spikes.csv",
row.names = FALSE,
col.names = FALSE)
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
source('~/GitHub/Music-as-Medicine/scripts/importer.R')
spikes <- t(as.matrix (cbind(subject_2[is_peak == TRUE][, "seconds"], subject_3[is_peak == TRUE][, "seconds"])))
spikes <- t(as.matrix (cbind(subject_2[is_peak == TRUE][, "seconds"], subject_3[is_peak == TRUE][, "seconds"])))
library(here)
library(tuneR)
library(data.table)
library(signal)
# Basic first exploratory Bobbi MaM import script.
# To be refactored when more data available.
source("qrs_detect.R")
source("peak_detect.R")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
setwd(here::here("scripts"))
########################################################## import files #########################################################
# read and plot music wav, that has been pre-cut to delete all before first and past last beeps
# full range 0 to 4139.022 seconds
# here, retrieve the part from 17 to 31 minutes - that is, the first musical intermezzo
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
# read the bobbi data files in data dir
subject_list <- list()
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files))
# for now, we work with two data frames seperately
assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))
# for future analyses:
subject_list[[gsub("*.csv$", "", files[i])]] <-
fread(paste0("../ecg/",files[i]), sep=";")
# delete empty column
subject_2$V14 = NULL
subject_3$V14 = NULL
# add an index
subject_2$idx <- seq.int(nrow(subject_2))
subject_3$idx <- seq.int(nrow(subject_3))
########################################################## filter    #########################################################
# invert signal participant 3
subject_3$heartrate <- -1* subject_3$heartrate
# basic high pass filtering
highpass <- butter(2, 0.001, type="high")
subject_2$heartrate <- filter(highpass, x=subject_2$heartrate)
subject_3$heartrate <- filter(highpass, x=subject_3$heartrate)
# minimal low pass filtering
lowpass <- butter(2, 0.4, type="low")
subject_2$heartrate <- filter(lowpass, x=subject_2$heartrate)
subject_3$heartrate <- filter(lowpass, x=subject_3$heartrate)
subject_2 <- peak_detect_wavelet(subject_2, 10)
subject_3 <- peak_detect_wavelet(subject_3, 10)
########################################################## cut to beeps ######################################################
# find the start and end beeps
s2start = min(which(subject_2$mx > 4000))
s3start = min(which(subject_3$mx < -4000))
s3end = max(which(subject_3$mx > -1000))
# remove all past first and before last beeps
subject_2 <- subject_2[idx>=s2start]
subject_3 <- subject_3[idx>=s3start & idx<=s3end]
# start ms at zero
subject_2$ms <- subject_2$ms - subject_2$ms[1]
subject_3$ms <- subject_3$ms - subject_3$ms[1]
# add a "seconds" column
subject_2$seconds <- subject_2$ms/1000
subject_3$seconds <- subject_3$ms/1000
########################################################## scale data to audio beeps #######################################
# scale second scale correctly to music between beeps - nice and clean
# subject_2$seconds <- lin_map(subject_3$seconds, 0, max_audio)
# subject_3$seconds <- lin_map(subject_3$seconds, 0, max_audio)
# but... for current analysis,
# get the scale factor from s3 and apply to s3 and s2
# assumption here:
# scale of subject_2 clock has same drift as subject_clock
# this is the one part of our analysis that suffers from
# the not up-to-date bobbi firmware
# save max subject_3 seconds
max_s3 <- max(subject_3$second)
# max audio in seconds
max_audio <- 4139.022
# scale factor
scale_factor <- max_audio/max_s3
subject_3$seconds <- subject_3$seconds * scale_factor
subject_2$seconds <- subject_2$seconds * scale_factor
########################################################## save between beeps data #######################################
# export "between beeps" data
fwrite(subject_2[,c("seconds","heartrate")], "../export/subject_2_hr_between_beeps.csv")
fwrite(subject_3[,c("seconds","heartrate")], "../export/subject_3_hr_between_beeps.csv")
fwrite(subject_3[,c("seconds","mx")], "../export/subject_3_mx_between_beeps.csv")
########################################################## save first musical intermezzo ##################################
# now subsection export
# cut to first musical element
start <- 17*1000*60  # music start at 17:00 minutes
end   <- 24*1000*60  # music ends at 24:00 minutes
subject_2 <- subject_2[ms>start & ms<end]
subject_3 <- subject_3[ms>start & ms<end]
subject_2 <- qrs_detect(subject_2,120,30)
subject_3 <- qrs_detect(subject_3,120,30)
subject_2 <- delete_close_peaks(subject_2)
subject_3 <- delete_close_peaks(subject_3)
# set start ms and seconds to zero
subject_2$ms <- subject_2$ms - subject_2$ms[1]
subject_3$ms <- subject_3$ms - subject_3$ms[1]
subject_2$seconds <- subject_2$seconds - subject_2$seconds[1]
subject_3$seconds <- subject_3$seconds - subject_3$seconds[1]
# plot overview of HR and MX to check if all seems right
plot(subject_2$seconds/60, subject_2$mx, type = "l")
plot(subject_3$seconds/60, subject_3$mx, type = "l")
plot(subject_2$seconds/60, subject_2$heartrate, type = "l")
points(subject_2[is_peak == TRUE]$seconds/60,subject_2[is_peak == TRUE]$heartrate, col = "red")
plot(subject_3$seconds/60, subject_3$heartrate, type = "l")
points(subject_3[is_peak == TRUE]$seconds/60,subject_3[is_peak == TRUE]$heartrate, col = "red")
# lets zoom in a little
start <- 2*1000*60
end   <- 2.3*1000*60
plot(subject_2[ms>start & ms<end]$seconds, subject_2[ms>start & ms<end]$heartrate, type = "l")
points(subject_2[ms>start & ms<end & is_peak == TRUE]$seconds,
subject_2[ms>start & ms<end & is_peak == TRUE]$heartrate, col = "red")
plot(subject_3[ms>start & ms<end]$seconds, subject_3[ms>start & ms<end]$heartrate, type = "l")
points(subject_3[ms>start & ms<end & is_peak == TRUE]$seconds,
subject_3[ms>start & ms<end & is_peak == TRUE]$heartrate, col = "red")
# export for 17-24 minutes data
fwrite(subject_2[,c("seconds","heartrate")], "../export/subject_2_hr_between_17_24.csv")
fwrite(subject_3[,c("seconds","heartrate")], "../export/subject_3_hr_between_17_24.csv")
fwrite(subject_2[is_peak==TRUE][,c("seconds","heartrate")], "../export/subject_2_peaks_between_17_24.csv")
fwrite(subject_3[is_peak==TRUE][,c("seconds","heartrate")], "../export/subject_3_peaks_between_17_24.csv")
a <- subject_2[is_peak == TRUE][, "seconds"]
b <- subject_3[is_peak == TRUE][, "seconds"]
spikes <- t(as.matrix (cbind(subject_2[is_peak == TRUE][, "seconds"], subject_3[is_peak == TRUE][, "seconds"])))
View(spikes)
write.table(spikes,
file = "../export/spikes.csv",
row.names = FALSE,
col.names = FALSE)
?cbind
?cbind.data.frame
?write.table
s2 <- subject_2[is_peak == TRUE][, "seconds"]
s3 <- subject_3[is_peak == TRUE][, "seconds"]
length(s3) <- length(s2)
View(s3)
s2 <- subject_2[is_peak == TRUE][, "seconds"]
s3 <- subject_3[is_peak == TRUE][, "seconds"]
length(s3) <- length(s2)
spikes <- t(as.matrix (cbind(s2,s3)))
write.table(spikes,
file = "../export/spikes.csv",
row.names = FALSE,
col.names = FALSE,
na = "")
length(s3) = length(s2)
length(s3) = length(s2)
cbind(s2,s3)
spikes <- t(as.matrix (Cbind(s2,s3)))
write.table(spikes,
file = "../export/spikes.csv",
row.names = FALSE,
col.names = FALSE,
na = "")
spikes <- t(as.matrix (cbind(subject_2[is_peak == TRUE][, "seconds"], subject_3[is_peak == TRUE][, "seconds"])))
s2 <- subject_2[is_peak == TRUE][, "seconds"]
s3 <- subject_3[is_peak == TRUE][, "seconds"]
spikes <- t(as.matrix (Cbind(s2,s3)))
write.table(spikes,
file = "../export/spikes.txt",
row.names = FALSE,
col.names = FALSE,
na = "")
lin_map <- function(x, from, to) {
(x - min(x)) / max(x - min(x)) * (to - from) + from
}
padNA <- function (mydata, rowsneeded, first = TRUE)
{
temp1 = colnames(mydata)
rowsneeded = rowsneeded - nrow(mydata)
temp2 = setNames(
data.frame(matrix(rep(NA, length(temp1) * rowsneeded),
ncol = length(temp1))), temp1)
if (isTRUE(first)) rbind(mydata, temp2)
else rbind(temp2, mydata)
}
dotnames <- function(...) {
vnames <- as.list(substitute(list(...)))[-1L]
vnames <- unlist(lapply(vnames,deparse), FALSE, FALSE)
vnames
}
Cbind <- function(..., first = TRUE) {
Names <- dotnames(...)
datalist <- setNames(list(...), Names)
nrows <- max(sapply(datalist, function(x)
ifelse(is.null(dim(x)), length(x), nrow(x))))
datalist <- lapply(seq_along(datalist), function(x) {
z <- datalist[[x]]
if (is.null(dim(z))) {
z <- setNames(data.frame(z), Names[x])
} else {
if (is.null(colnames(z))) {
colnames(z) <- paste(Names[x], sequence(ncol(z)), sep = "_")
} else {
colnames(z) <- paste(Names[x], colnames(z), sep = "_")
}
}
padNA(z, rowsneeded = nrows, first = first)
})
do.call(cbind, datalist)
}
spikes <- t(as.matrix (cbind(subject_2[is_peak == TRUE][, "seconds"], subject_3[is_peak == TRUE][, "seconds"])))
s2 <- subject_2[is_peak == TRUE][, "seconds"]
s3 <- subject_3[is_peak == TRUE][, "seconds"]
spikes <- t(as.matrix (Cbind(s2,s3)))
write.table(spikes,
file = "../export/spikes.txt",
row.names = FALSE,
col.names = FALSE,
na = "")
##############################################################################################################
#
#       Project:     Music as Medicine, Pilot two
#       URL:         https://pavlov.tech/2018/06/29/syncing-bobbi-music-as-medicine/
#       Purpose:     First exploration of Music as Medicine ECG data
#       Date:        2018-07-03
#       Author:      Robin van Emden, http://pavlov.tech
#       Affiliation: Jheronimus Academy of Data Science, http://jads.nl
#
##############################################################################################################
# A first fast and frugal exploratory Bobbi MaM import/export script
library(here)
library(tuneR)
library(data.table)
library(signal)
source("qrs_detect.R")
source("peak_detect.R")
source("utils.R")
setwd(here::here("scripts"))
################################### import files #############################################################
# music was precut to between beeps with audacity - length: 0 to 4139.022 seconds
# here, we load resulting WAV between 17 to 31 minutes - that is, the first musical intermezzo
# load and plot music
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)
# music was precut to between beeps with audacity - length: 0 to 4139.022 seconds
# here, we load resulting WAV between 17 to 24 minutes - that is, the first musical intermezzo
# load and plot music
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 24, units = "minutes")
plot(music)
# music was precut to between beeps with audacity - length: 0 to 4139.022 seconds
# here, we load resulting WAV between 17 to 24 minutes - that is, the first musical intermezzo
# load and plot music
music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 24, units = "minutes")
plot(music)
