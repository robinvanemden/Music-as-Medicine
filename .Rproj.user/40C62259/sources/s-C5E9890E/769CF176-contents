library(here)
library(tuneR)
library(data.table)
library(signal)

# Basic first exploratory Bobbi MaM import script.
# To be refactored when there is more data available.

source("qrs_detect.R")
source("peak_detect.R")

lin_map <- function(x, from, to) {
  (x - min(x)) / max(x - min(x)) * (to - from) + from
}

setwd(here::here("scripts"))

########################################################## import files #########################################################

# read and plot music wav, that has been pre-cut to delete all before first and past last beeps
# full range 0 to 4139.022 seconds

# here, retrieve the part from 17 to 31 minutes - that is, the first musical intermezzo

music <- readWave("../music/music-as-medicine-cut-to-beeps.wav", from = 17, to = 31, units = "minutes")
plot(music)

# read the bobbi data files in data dir

subject_list <- list()

# for now, we work with two files separately - but in the future, we will
# of course define a function to do the work of the script,
# which will take a subject_list as one of its arguments.
files = list.files(path = "../ecg/", pattern="*.csv")
for (i in 1:length(files)) 

  # for now:
  assign(paste0("subject_",i), fread(paste0("../ecg/",files[i]), sep=";"))

  # for future analyses:
  subject_list[[paste0("subject_",i)]] <- fread(paste0("../ecg/",files[i]), sep=";")
  
# delete empty column

subject_2$V14 = NULL
subject_3$V14 = NULL

# add an index

subject_2$idx <- seq.int(nrow(subject_2))
subject_3$idx <- seq.int(nrow(subject_3))

########################################################## filter    #########################################################

# invert signal participant 3
subject_3$heartrate <- -1* subject_3$heartrate

# basic high pass filtering

highpass <- butter(2, 0.001, type="high")
subject_2$heartrate <- filter(highpass, x=subject_2$heartrate)
subject_3$heartrate <- filter(highpass, x=subject_3$heartrate)

# minimal low pass filtering

lowpass <- butter(2, 0.4, type="low")
subject_2$heartrate <- filter(lowpass, x=subject_2$heartrate)
subject_3$heartrate <- filter(lowpass, x=subject_3$heartrate)

subject_2 <- peak_detect_wavelet(subject_2, 10)
subject_3 <- peak_detect_wavelet(subject_3, 10)

########################################################## cut to beeps ######################################################

# find the start and end beeps

s2start = min(which(subject_2$mx > 4000))
s3start = min(which(subject_3$mx < -4000))
s3end = max(which(subject_3$mx > -1000))

# remove all past first and before last beeps

subject_2 <- subject_2[idx>=s2start]
subject_3 <- subject_3[idx>=s3start & idx<=s3end]

# start ms at zero

subject_2$ms <- subject_2$ms - subject_2$ms[1]
subject_3$ms <- subject_3$ms - subject_3$ms[1]

# add a "seconds" column

subject_2$seconds <- subject_2$ms/1000
subject_3$seconds <- subject_3$ms/1000

########################################################## scale data to audio beeps #######################################

# scale second scale correctly to music between beeps - nice and clean
# subject_2$seconds <- lin_map(subject_3$seconds, 0, max_audio)
# subject_3$seconds <- lin_map(subject_3$seconds, 0, max_audio)

# but... for current analysis, 
# get the scale factor from s3 and apply to s3 and s2
# assumption here: 
# scale of subject_2 clock has same drift as subject_clock
# this is the one part of our analysis that suffers from 
# the not up-to-date bobbi firmware

# save max subject_3 seconds

max_s3 <- max(subject_3$second)

# max audio in seconds

max_audio <- 4139.022

# scale factor

scale_factor <- max_audio/max_s3

subject_3$seconds <- subject_3$seconds * scale_factor
subject_2$seconds <- subject_2$seconds * scale_factor


########################################################## save between beeps data #######################################

# export "between beeps" for visualisation in Sonic Visualizer

fwrite(subject_2[,c("seconds","heartrate")], "../export/subject_2_hr_between_beeps.csv")
fwrite(subject_3[,c("seconds","heartrate")], "../export/subject_3_hr_between_beeps.csv")
fwrite(subject_3[,c("seconds","mx")], "../export/subject_3_mx_between_beeps.csv")

########################################################## save first musical intermezzo ##################################

# now subsection export 

# cut to first musical element 

start <- 17*1000*60  # music start at 17:00 minutes
end   <- 24*1000*60  # music ends at 24:00 minutes

subject_2 <- subject_2[ms>start & ms<end]
subject_3 <- subject_3[ms>start & ms<end]

subject_2 <- qrs_detect(subject_2,120,30)
subject_3 <- qrs_detect(subject_3,120,30)

subject_2 <- delete_close_peaks(subject_2)
subject_3 <- delete_close_peaks(subject_3)

# set start ms and seconds to zero

subject_2$ms <- subject_2$ms - subject_2$ms[1]
subject_3$ms <- subject_3$ms - subject_3$ms[1]

subject_2$seconds <- subject_2$seconds - subject_2$seconds[1]
subject_3$seconds <- subject_3$seconds - subject_3$seconds[1]

# plot overview of HR and MX to check if all seem right

plot(subject_2$seconds/60, subject_2$mx, type = "l")
plot(subject_3$seconds/60, subject_3$mx, type = "l")

plot(subject_2$seconds/60, subject_2$heartrate, type = "l")
points(subject_2[is_peak == TRUE]$seconds/60,subject_2[is_peak == TRUE]$heartrate, col = "red")
plot(subject_3$seconds/60, subject_3$heartrate, type = "l")
points(subject_3[is_peak == TRUE]$seconds/60,subject_3[is_peak == TRUE]$heartrate, col = "red")

# lets zoom in a little 

start <- 2*1000*60
end   <- 2.3*1000*60

plot(subject_2[ms>start & ms<end]$seconds, subject_2[ms>start & ms<end]$heartrate, type = "l")
points(subject_2[ms>start & ms<end & is_peak == TRUE]$seconds,
       subject_2[ms>start & ms<end & is_peak == TRUE]$heartrate, col = "red")

plot(subject_3[ms>start & ms<end]$seconds, subject_3[ms>start & ms<end]$heartrate, type = "l")
points(subject_3[ms>start & ms<end & is_peak == TRUE]$seconds,
       subject_3[ms>start & ms<end & is_peak == TRUE]$heartrate, col = "red")

# export for visualisation in Sonic Visualizer

fwrite(subject_2[,c("seconds","heartrate")], "../export/subject_2_hr_between_17_24.csv")
fwrite(subject_3[,c("seconds","heartrate")], "../export/subject_3_hr_between_17_24.csv")

fwrite(subject_2[is_peak==TRUE][,c("seconds","heartrate")], "../export/subject_2_peaks_between_17_24.csv")
fwrite(subject_3[is_peak==TRUE][,c("seconds","heartrate")], "../export/subject_3_peaks_between_17_24.csv")

